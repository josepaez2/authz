
= content_for :nav_title do
  | Maintenance Dashboard

section.section
  .container
    .columns
      .column
        .card
          .card-content.has-text-centered
            p.title.is-1 = number_with_delimiter @non_created_controller_actions.count
            p.subtitle Controller Actions to be created
            - if @non_created_controller_actions.blank?
              p Everything's up to date
            - else
              .card-content
                .buttons.is-centered
                  = link_to 'Review', pending_controller_actions_path, class: 'button is-light'
                  = authz_link_to 'Create all', bulk_controller_actions_path(create_all: true), { class: 'button is-primary', method: :post, data: { confirm: 'Are you sure?' } }, skip_scoping:  true
      .column

section.section
  .container
    h2.title.is-4 Unused scopable keywords
    .columns
      - ::Authz::Scopables::Base.get_scopables_names.each do |scoping_module|
        .column
          .card
            table.table.is-fullwidth
              thead
                tr
                  th = scoping_module
              tbody
                - stale_keywords = ::Authz::ScopingRule.where(scopable: scoping_module).where.not(keyword: scoping_module.constantize.available_keywords).pluck(:keyword).uniq
                - if stale_keywords.blank?
                  tr
                    td.has-text-centered Everything OK!
                - stale_keywords.each do |keyword|
                  tr
                    td = keyword



section.section
  .container
    h2.title.is-4 Scopables not in codebase
    .columns
      .column.is-one-quarter
        .card
          .card-content.has-text-centered
            p.title = @invalid_scoping_rules.count
            p Scopables removed from code but still present in the database
      .column
        .card
          table.table.is-fullwidth
            tbody
              - @invalid_scoping_rules.each do |rule_name|
                tr
                  td = rule_name
